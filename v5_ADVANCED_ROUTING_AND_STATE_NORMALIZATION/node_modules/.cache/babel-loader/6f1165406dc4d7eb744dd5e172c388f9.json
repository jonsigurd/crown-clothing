{"ast":null,"code":"var _jsxFileName = \"/workspace/crown-clothing/crown-clothing/v4_SELECTORS/src/components/cart-dropdown/cart-dropdown.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport CustomButton from '../custom-button/custom-button.component';\nimport CartItem from '../cart-item/cart-item.component';\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions.js';\nimport './cart-dropdown.styles.scss'; // Destructuring cartItems and history\n// As mentioned above the mconnect function, we can just pass in dispatch here, without writing a\n// mapDispatchToProps\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => // Mapping out the cartItems inside the cart-item div\n// We will conditionally render a span or our cartItems, depending on whether or not the cartItems\n// array has a length that's greater than 0. So we say: if there are items, we'll render cartItems,\n// and if not, we'll render a span with className='empty-message' that prompts the user\nReact.createElement(\"div\", {\n  className: \"cart-dropdown\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"cart-items\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, cartItems.length ? cartItems.map(cartItem => React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n})) : React.createElement(\"span\", {\n  className: \"empty-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, \"Your cart is empty\")), React.createElement(CustomButton, {\n  onClick: () => history.push('/checkout'),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, \"GO TO CHECKOUT\")); // Here the createStructuredSelector call will automatically pass our top level state that we get as\n// our mapStateToProps into each subsequent selector\n\n\nconst mapStateToProps = createStructuredSelector({\n  // The props we want point to the correct selector now\n  cartItems: selectCartItems\n}); // Getting acces to cartItems using connect\n// We wrap our connect function inside of our withRouter. This is because withRouter can take\n// components as its arguments (in this case: the component that is returned from our connect call).\n// The order in which it's wrapped matters, because withRouter will pass the match, history and\n// location objects into the component that's being wrapped. We first get the connect component and\n// then withRouter recieves those props\n// connect automatically passes dispatch into our components as a prop, if it's not specified as a\n// second argument.\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown));","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v4_SELECTORS/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","connect","createStructuredSelector","withRouter","CustomButton","CartItem","selectCartItems","toggleCartHidden","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AAEA,OAAO,6BAAP,C,CAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KACpB;AACA;AACA;AACA;AACA;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEF,SAAS,CAACG,MAAV,GACAH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IACrB,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,EAAA,IAAI,EAAED,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADA,GAKA;AAAM,EAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF,CADD,EAUC,oBAAC,YAAD;AAAc,EAAA,OAAO,EAAE,MAAMJ,OAAO,CAACM,IAAR,CAAa,WAAb,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVD,CALD,C,CAmBA;AACA;;;AACA,MAAMC,eAAe,GAAGf,wBAAwB,CAAC;AAChD;AACAO,EAAAA,SAAS,EAAEH;AAFqC,CAAD,CAAhD,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeH,UAAU,CAACF,OAAO,CAACgB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\n\nimport CustomButton from '../custom-button/custom-button.component';\nimport CartItem from '../cart-item/cart-item.component';\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions.js';\n\nimport './cart-dropdown.styles.scss';\n\n// Destructuring cartItems and history\n// As mentioned above the mconnect function, we can just pass in dispatch here, without writing a\n// mapDispatchToProps\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\n\t// Mapping out the cartItems inside the cart-item div\n\t// We will conditionally render a span or our cartItems, depending on whether or not the cartItems\n\t// array has a length that's greater than 0. So we say: if there are items, we'll render cartItems,\n\t// and if not, we'll render a span with className='empty-message' that prompts the user\n\t<div className='cart-dropdown'>\n\t\t<div className='cart-items'>\n\t\t\t{cartItems.length ? (\n\t\t\t\tcartItems.map(cartItem => (\n\t\t\t\t\t<CartItem key={cartItem.id} item={cartItem} />\n\t\t\t\t))\n\t\t\t) : (\n\t\t\t\t<span className='empty-message'>Your cart is empty</span>\n\t\t\t)}\n\t\t</div>\n\t\t<CustomButton onClick={() => history.push('/checkout')}>GO TO CHECKOUT</CustomButton>\n\t</div>\n);\n\n// Here the createStructuredSelector call will automatically pass our top level state that we get as\n// our mapStateToProps into each subsequent selector\nconst mapStateToProps = createStructuredSelector({\n\t// The props we want point to the correct selector now\n\tcartItems: selectCartItems\n});\n\n// Getting acces to cartItems using connect\n// We wrap our connect function inside of our withRouter. This is because withRouter can take\n// components as its arguments (in this case: the component that is returned from our connect call).\n// The order in which it's wrapped matters, because withRouter will pass the match, history and\n// location objects into the component that's being wrapped. We first get the connect component and\n// then withRouter recieves those props\n// connect automatically passes dispatch into our components as a prop, if it's not specified as a\n// second argument.\nexport default withRouter(connect(mapStateToProps)(CartDropdown));"]},"metadata":{},"sourceType":"module"}