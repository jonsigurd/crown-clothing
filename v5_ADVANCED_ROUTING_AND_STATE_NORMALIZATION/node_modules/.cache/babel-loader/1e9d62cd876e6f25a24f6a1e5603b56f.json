{"ast":null,"code":"// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect'; // Input selector that is a function that gets the state and just returns the state.shop\n\nconst selectShop = state => state.shop; // Output selector\n\n\nexport const selectCollections = createSelector( // Takes a collection (array) of input selectors as first argument\n// Takes a function that returns the value that we want out of the selector as second argument\n[selectShop], shop => shop.collections); // Output selector taht can convert our object of SHOP_DATA into an array\n// \n\nexport const selectCollectionsForPreview = createSelector( // Returns createSelector call that gets selectCollections\n[selectCollections], // The method Object.keys gets us all of the keys of an object that we passed into it and gives it to us\n// in an array format. Here we get the keys off of our collections (these are hats, sneaker, jackets,\n// womens and mens)\n// We map over the array of keys and we'll give the key the collections at that key value (the data at\n// at that key)\ncollections => Object.keys(collections).map(key => collections[key])); // Output selector. We pass in the collectionUrlParam, which is a string, and we'll return\n// cretaeSelector, which in this case is a function that returns another function\n\nexport const selectCollection = collectionUrlParam => createSelector( // Returns createSelector call that gets selectCollections\n[selectCollections], // This returns the corresponding collection in SHOP_DATA based on the string value of the url\ncollections => collections[collectionUrlParam]);","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v5_ADVANCED_ROUTING_AND_STATE_NORMALIZATION/src/redux/shop/shop.selectors.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;;;AACA,OAAO,MAAMC,iBAAiB,GAAGJ,cAAc,EAC9C;AACA;AACA,CAACC,UAAD,CAH8C,EAI9CE,IAAI,IAAIA,IAAI,CAACE,WAJiC,CAAxC,C,CAOP;AACA;;AACA,OAAO,MAAMC,2BAA2B,GAAGN,cAAc,EACxD;AACA,CAACI,iBAAD,CAFwD,EAGxD;AACA;AACA;AACA;AACA;AACAC,WAAW,IAAIE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CARyC,CAAlD,C,CAWP;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,kBAAkB,IAAIZ,cAAc,EACnE;AACA,CAACI,iBAAD,CAFmE,EAGnE;AACAC,WAAW,IAAIA,WAAW,CAACO,kBAAD,CAJyC,CAA7D","sourcesContent":["// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect';\n\n// Input selector that is a function that gets the state and just returns the state.shop\nconst selectShop = state => state.shop;\n\n// Output selector\nexport const selectCollections = createSelector(\n\t// Takes a collection (array) of input selectors as first argument\n\t// Takes a function that returns the value that we want out of the selector as second argument\n\t[selectShop],\n\tshop => shop.collections\n);\n\n// Output selector taht can convert our object of SHOP_DATA into an array\n// \nexport const selectCollectionsForPreview = createSelector(\n\t// Returns createSelector call that gets selectCollections\n\t[selectCollections],\n\t// The method Object.keys gets us all of the keys of an object that we passed into it and gives it to us\n\t// in an array format. Here we get the keys off of our collections (these are hats, sneaker, jackets,\n\t// womens and mens)\n\t// We map over the array of keys and we'll give the key the collections at that key value (the data at\n\t// at that key)\n\tcollections => Object.keys(collections).map(key => collections[key])\n);\n\n// Output selector. We pass in the collectionUrlParam, which is a string, and we'll return\n// cretaeSelector, which in this case is a function that returns another function\nexport const selectCollection = collectionUrlParam => createSelector(\n\t// Returns createSelector call that gets selectCollections\n\t[selectCollections],\n\t// This returns the corresponding collection in SHOP_DATA based on the string value of the url\n\tcollections => collections[collectionUrlParam]\n);"]},"metadata":{},"sourceType":"module"}