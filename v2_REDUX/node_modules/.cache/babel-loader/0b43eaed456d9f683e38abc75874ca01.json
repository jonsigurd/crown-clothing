{"ast":null,"code":"import _defineProperty from \"/workspace/crown-clothing/crown-clothing/v2_REDUX/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport UserActionTypes from './user'; // Initial state when this component mounts for the first time\n\nconst INITIAL_STATE = {\n  currentUser: null\n}; // Function takes the state (passed from the store (is initial state as default)) and some action\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  // Switch statement (if-else statement) that takes action.type as string\n  switch (action.type) {\n    // If we want that action\n    case 'SET_CURRENT_USER':\n      // Returning a new object which represents the new state that\n      // our userReducer is going to transform into\n      return _objectSpread({}, state, {\n        currentUser: action.payload // Setting currentUser value with payload\n        // Otherwise\n\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer; // The header component needs to pull this","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v2_REDUX/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","userReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,OAAOA,eAAP,MAA4B,QAA5B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,WAAW,EAAE;AADQ,CAAtB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAkC;AACrD;AACA,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAK,kBAAL;AACC;AACA;AACA,+BACIF,KADJ;AAECF,QAAAA,WAAW,EAAEG,MAAM,CAACE,OAFrB,CAE6B;AAE9B;;AAJC;;AAKD;AACC,aAAOH,KAAP;AAXF;AAaA,CAfD;;AAiBA,eAAeD,WAAf,C,CAA4B","sourcesContent":["import UserActionTypes from './user'\n\n// Initial state when this component mounts for the first time\nconst INITIAL_STATE = {\n\tcurrentUser: null\n};\n\n// Function takes the state (passed from the store (is initial state as default)) and some action\nconst userReducer = (state = INITIAL_STATE, action) =>{\n\t// Switch statement (if-else statement) that takes action.type as string\n\tswitch (action.type) {\n\t\t// If we want that action\n\t\tcase 'SET_CURRENT_USER':\n\t\t\t// Returning a new object which represents the new state that\n\t\t\t// our userReducer is going to transform into\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentUser: action.payload // Setting currentUser value with payload\n\t\t\t}\n\t\t// Otherwise\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default userReducer; // The header component needs to pull this"]},"metadata":{},"sourceType":"module"}