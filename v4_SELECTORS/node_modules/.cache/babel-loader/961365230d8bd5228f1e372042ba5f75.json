{"ast":null,"code":"import _defineProperty from \"/workspace/crown-clothing/crown-clothing/v4_SELECTORS/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport CartActionTypes from './cart.types';\nimport { addItemToCart } from './cart.utils';\nconst INITIAL_STATE = {\n  // Hiding the dropdown by default\n  hidden: true,\n  // Setting cartItems to an empty array, so that we can add items to this cartItems array\n  cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    // Toggling the hidden state on and off based on if it's true or false\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return _objectSpread({}, state, {\n        hidden: !state.hidden\n      });\n\n    case CartActionTypes.ADD_ITEM:\n      return _objectSpread({}, state, {\n        // Spreading the existing items to the cartItems array and then add the payload from the\n        // action at the end\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.REMOVE_ITEM: // We now make a new case that will listen to the action of remiving an item from cart\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return _objectSpread({}, state, {\n        // We make a new array without any instance of the item that we are trying to clear away\n        // We filter the array such that, if the cart item id does not match the action payload\n        // (which is the item we are trying to remove), then keep it, but if it does match, then\n        // filter it out\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v4_SELECTORS/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","filter","cartItem","id"],"mappings":";;;;;;AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,MAAMC,aAAa,GAAG;AACrB;AACAC,EAAAA,MAAM,EAAE,IAFa;AAGrB;AACAC,EAAAA,SAAS,EAAE;AAJU,CAAtB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACtD,UAAOA,MAAM,CAACC,IAAd;AACC;AACA,SAAKR,eAAe,CAACS,kBAArB;AACC,+BACIH,KADJ;AAECH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFhB;;AAID,SAAKH,eAAe,CAACU,QAArB;AACC,+BACIJ,KADJ;AAEC;AACA;AACAF,QAAAA,SAAS,EAAEH,aAAa,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAJzB;;AAMD,SAAKX,eAAe,CAACY,WAArB,CAdD,CAgBE;;AACA,SAAKZ,eAAe,CAACa,oBAArB;AACC,+BACIP,KADJ;AAEC;AACA;AACA;AACA;AACAF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CACVC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EADjC;AANZ;;AAUF;AACC,aAAOV,KAAP;AA7BF;AA+BA,CAhCD;;AAkCA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from './cart.types';\nimport { addItemToCart } from './cart.utils';\n\nconst INITIAL_STATE = {\n\t// Hiding the dropdown by default\n\thidden: true,\n\t// Setting cartItems to an empty array, so that we can add items to this cartItems array\n\tcartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n\tswitch(action.type) {\n\t\t// Toggling the hidden state on and off based on if it's true or false\n\t\tcase CartActionTypes.TOGGLE_CART_HIDDEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\thidden: !state.hidden\n\t\t\t};\n\t\tcase CartActionTypes.ADD_ITEM:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t// Spreading the existing items to the cartItems array and then add the payload from the\n\t\t\t\t// action at the end\n\t\t\t\tcartItems: addItemToCart(state.cartItems, action.payload)\n\t\t\t};\n\t\tcase CartActionTypes.REMOVE_ITEM:\n\t\t\t\n\t\t\t// We now make a new case that will listen to the action of remiving an item from cart\n\t\t\tcase CartActionTypes.CLEAR_ITEM_FROM_CART:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t// We make a new array without any instance of the item that we are trying to clear away\n\t\t\t\t\t// We filter the array such that, if the cart item id does not match the action payload\n\t\t\t\t\t// (which is the item we are trying to remove), then keep it, but if it does match, then\n\t\t\t\t\t// filter it out\n\t\t\t\t\tcartItems: state.cartItems.filter(\n\t\t\t\t\t\tcartItem => cartItem.id !== action.payload.id\n\t\t\t\t\t)\n\t\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}