{"ast":null,"code":"var _jsxFileName = \"/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component'; // We destructure the match object. Our shop page is being nested inside a route in App.js, and Route\n// automatically passes those three objects into our component as props (we get match, location and\n// history)\n// We want match, because we want to display the current path '/shop'\n\nconst ShopPage = ({\n  match\n}) => // match.path is the current path '/shop' and '/:collectionId' will be the path that follows, which\n// will match either '/hats', '/sneakers', '/jackets', '/womens' or '/mens'\n// /:collectionId allows us to access the category id as parameter on the match object, when we're\n// inside of our collection page\nReact.createElement(\"div\", {\n  className: \"shop-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, React.createElement(Route, {\n  exact: true,\n  path: \"\".concat(match.path),\n  component: CollectionsOverview,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"\".concat(match.path, \"/:collectionId\"),\n  component: CollectionPage,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}));\n\nexport default ShopPage;","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionsOverview","CollectionPage","ShopPage","match","path"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAChB;AACA;AACA;AACA;AACA;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,KAAD;AAAO,EAAA,KAAK,MAAZ;AAAa,EAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAAjB;AAAoC,EAAA,SAAS,EAAEJ,mBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAEC,oBAAC,KAAD;AAAO,EAAA,IAAI,YAAKG,KAAK,CAACC,IAAX,mBAAX;AAA4C,EAAA,SAAS,EAAEH,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFD,CALD;;AAWA,eAAeC,QAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\n\n// We destructure the match object. Our shop page is being nested inside a route in App.js, and Route\n// automatically passes those three objects into our component as props (we get match, location and\n// history)\n// We want match, because we want to display the current path '/shop'\nconst ShopPage = ({ match }) => (\n\t// match.path is the current path '/shop' and '/:collectionId' will be the path that follows, which\n\t// will match either '/hats', '/sneakers', '/jackets', '/womens' or '/mens'\n\t// /:collectionId allows us to access the category id as parameter on the match object, when we're\n\t// inside of our collection page\n\t<div className='shop-page'>\n\t\t<Route exact path={`${match.path}`} component={CollectionsOverview} />\n\t\t<Route path={`${match.path}/:collectionId`} component={CollectionPage} />\n\t</div>\n);\n\nexport default ShopPage;"]},"metadata":{},"sourceType":"module"}