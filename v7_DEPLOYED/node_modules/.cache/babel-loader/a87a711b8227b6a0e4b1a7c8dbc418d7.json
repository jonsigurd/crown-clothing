{"ast":null,"code":"// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect'; // This is an object that maps the string value to the respective id, where the string value that\n// we're getting from our url parameter, will be the actual prop\n// We're using this object, because our url parameter is a string whereas the id we want to match is\n// a number\n\nconst COLLECTION_ID_MAP = {\n  // '/hats' gets id=1 and so on\n  // Actually the url string value goes to the id \n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5\n}; // Input selector that is a function that gets the state and just returns the state.shop\n\nconst selectShop = state => state.shop; // Output selector\n\n\nexport const selectCollections = createSelector( // Takes a collection (array) of input selectors as first argument\n// Takes a function that returns the value that we want out of the selector as second argument\n[selectShop], shop => shop.collections); // Output selector. We pass in the collectionUrlParam, which is a string, and we'll return\n// cretaeSelector, which in this case is a function that returns another function\n\nexport const selectCollection = collectionUrlParam => createSelector( // Returns createSelector call that gets selectCollections\n[selectCollections], collections => collections[collectionUrlParam]);","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v5_ADVANCED_ROUTING_AND_STATE_NORMALIZATION/src/redux/shop/shop.selectors.js"],"names":["createSelector","COLLECTION_ID_MAP","hats","sneakers","jackets","womens","mens","selectShop","state","shop","selectCollections","collections","selectCollection","collectionUrlParam"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG;AACzB;AACA;AACAC,EAAAA,IAAI,EAAE,CAHmB;AAIzBC,EAAAA,QAAQ,EAAE,CAJe;AAKzBC,EAAAA,OAAO,EAAE,CALgB;AAMzBC,EAAAA,MAAM,EAAE,CANiB;AAOzBC,EAAAA,IAAI,EAAE;AAPmB,CAA1B,C,CAUA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;;;AACA,OAAO,MAAMC,iBAAiB,GAAGV,cAAc,EAC9C;AACA;AACA,CAACO,UAAD,CAH8C,EAI9CE,IAAI,IAAIA,IAAI,CAACE,WAJiC,CAAxC,C,CAOP;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,kBAAkB,IAAIb,cAAc,EACnE;AACA,CAACU,iBAAD,CAFmE,EAGnEC,WAAW,IAAIA,WAAW,CAACE,kBAAD,CAHyC,CAA7D","sourcesContent":["// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect';\n\n// This is an object that maps the string value to the respective id, where the string value that\n// we're getting from our url parameter, will be the actual prop\n// We're using this object, because our url parameter is a string whereas the id we want to match is\n// a number\nconst COLLECTION_ID_MAP = {\n\t// '/hats' gets id=1 and so on\n\t// Actually the url string value goes to the id \n\thats: 1,\n\tsneakers: 2,\n\tjackets: 3,\n\twomens: 4,\n\tmens: 5\n};\n\n// Input selector that is a function that gets the state and just returns the state.shop\nconst selectShop = state => state.shop;\n\n// Output selector\nexport const selectCollections = createSelector(\n\t// Takes a collection (array) of input selectors as first argument\n\t// Takes a function that returns the value that we want out of the selector as second argument\n\t[selectShop],\n\tshop => shop.collections\n);\n\n// Output selector. We pass in the collectionUrlParam, which is a string, and we'll return\n// cretaeSelector, which in this case is a function that returns another function\nexport const selectCollection = collectionUrlParam => createSelector(\n\t// Returns createSelector call that gets selectCollections\n\t[selectCollections],\n\tcollections => collections[collectionUrlParam]\n);"]},"metadata":{},"sourceType":"module"}