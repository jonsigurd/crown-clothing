{"ast":null,"code":"import _defineProperty from \"/workspace/crown-clothing/crown-clothing/v4_SELECTORS/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/workspace/crown-clothing/crown-clothing/v4_SELECTORS/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom'; // Adding Redirect component to redirect users from the sign in page once they are signed in\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport './App.css';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport Header from './components/header/header.component';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport './pages/homepage/homepage.styles.scss';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    // Destructuring setCurrentUser auth of our props\n    const setCurrentUser = this.props.setCurrentUser; // Making this async, because we make a potential api request to firestore\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      // Fire userAuth object that we get back from our auth library\n      if (userAuth) {\n        // Getting userRef from firebase snapShot, to check if our database\n        // has updated at that reference with new data\n        const userRef = await createUserProfileDocument(userAuth); // Sending snapShot object representing that data currently stored in our database\n\n        userRef.onSnapshot(snapShot => {\n          // Getting props of data in our database - using snapSHot to get id and .data\n          // to get all the props of the snapShot we want\n          setCurrentUser(_objectSpread({\n            // Whenever our user snapShot updates, we are setting the userReducer value with our new object\n            id: snapShot.id\n          }, snapShot.data()));\n        });\n      } // If userAuth object comes back as null (that's maybe if the current user signs out)\n      // userAuth is the object we want to update setCurrentUser with\n\n\n      setCurrentUser(userAuth);\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  } // Handling routes\n\n\n  render() {\n    return (// Switching the signin route to exact and replacing component=SignInAndSignUPage\n      // to render, so that we can redirect user to home site, if he's signed in, and if not,\n      // then render the SignInAndSignUpPage\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: HomePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/shop\",\n        component: ShopPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/checkout\",\n        component: CheckoutPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/signin\",\n        render: () => this.props.currentUser ? React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }) : React.createElement(SignInAndSignUpPage, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })))\n    );\n  }\n\n} // Here the createStructuredSelector call will automatically pass our top level state that we get as\n// our mapStateToProps into each subsequent selector\n\n\nconst mapStateToProps = createStructuredSelector({\n  // The props we want point to the correct selector now\n  currentUser: selectCurrentUser\n}); // Second connect argument (first in header.component.jsx)\n// Function that gets a dispatch prop and returns an object, where the prop name will be a prop we want to pass in that dispatches the new action that we try to pass, which is SET_CURRENT_USER\n\nconst mapDispatchToProps = dispatch => ({\n  // Returning setCurrentUser that goes to a function that gets the user object and calls dispatch\n  // dispatch is a way for redux to know that whatever gets passed, it's going to be an action object that redux will pass to every reducer\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n}); // Connecting our app to the outcome of our initial connect call using the second argument of connect (mapDispatchToProps)\n// We replace our first argument from null (our currentUser) to mapStateToProps, so we have access to the actual current user once he's signed in\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v4_SELECTORS/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","SignInAndSignUpPage","CheckoutPage","Header","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC,C,CAA4D;;AAC5D,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,WAAP;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AAEA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,iBAAT,QAAiC,6BAAjC;AAEA,OAAO,uCAAP;;AAEA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAGjCC,mBAHiC,GAGX,IAHW;AAAA;;AAKjCC,EAAAA,iBAAiB,GAAG;AACnB;AADmB,UAEZL,cAFY,GAEM,KAAKM,KAFX,CAEZN,cAFY,EAInB;;AACA,SAAKI,mBAAL,GAA2BN,IAAI,CAACS,kBAAL,CAAwB,MAAMC,QAAN,IAAkB;AACpE;AACA,UAAGA,QAAH,EAAa;AACZ;AACA;AACA,cAAMC,OAAO,GAAG,MAAMV,yBAAyB,CAACS,QAAD,CAA/C,CAHY,CAKZ;;AACAC,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC9B;AACA;AACAX,UAAAA,cAAc;AACb;AACAY,YAAAA,EAAE,EAAED,QAAQ,CAACC;AAFA,aAGVD,QAAQ,CAACE,IAAT,EAHU,EAAd;AAKA,SARD;AASA,OAjBmE,CAkBpE;AACA;;;AACAb,MAAAA,cAAc,CAACQ,QAAD,CAAd;AACA,KArB0B,CAA3B;AAsBA;;AAEDM,EAAAA,oBAAoB,GAAG;AACtB,SAAKV,mBAAL;AACA,GApCgC,CAsCjC;;;AACAW,EAAAA,MAAM,GAAG;AACR,WACC;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAEtB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,EAGC,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,WAAlB;AAA8B,QAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHD,EAIC,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,SAAlB;AAA4B,QAAA,MAAM,EAAE,MAAM,KAAKU,KAAL,CAAWU,WAAX,GAA0B,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA1B,GAAmD,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,CAFD;AAJD;AAcA;;AAtDgC,C,CAyDlC;AACA;;;AACA,MAAMC,eAAe,GAAGzB,wBAAwB,CAAC;AAChD;AACAwB,EAAAA,WAAW,EAAEf;AAFmC,CAAD,CAAhD,C,CAKA;AACA;;AACA,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACvC;AACA;AACAnB,EAAAA,cAAc,EAAEoB,IAAI,IAAID,QAAQ,CAACnB,cAAc,CAACoB,IAAD,CAAf;AAHO,CAAL,CAAnC,C,CAMA;AACA;;;AACA,eAAe7B,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChB,GAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom'; // Adding Redirect component to redirect users from the sign in page once they are signed in\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\n\nimport Header from './components/header/header.component';\n\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\n\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser} from './redux/user/user.selectors';\n\nimport './pages/homepage/homepage.styles.scss';\n\nclass App extends React.Component {\n\t// We don't need a constructer now that we have made the connection arguments\n\t\n\tunsubscribeFromAuth = null;\n\t\n\tcomponentDidMount() {\n\t\t// Destructuring setCurrentUser auth of our props\n\t\tconst {setCurrentUser} = this.props;\n\t\t\n\t\t// Making this async, because we make a potential api request to firestore\n\t\tthis.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n\t\t\t// Fire userAuth object that we get back from our auth library\n\t\t\tif(userAuth) {\n\t\t\t\t// Getting userRef from firebase snapShot, to check if our database\n\t\t\t\t// has updated at that reference with new data\n\t\t\t\tconst userRef = await createUserProfileDocument(userAuth);\n\t\t\t\t\n\t\t\t\t// Sending snapShot object representing that data currently stored in our database\n\t\t\t\tuserRef.onSnapshot(snapShot => {\n\t\t\t\t\t// Getting props of data in our database - using snapSHot to get id and .data\n\t\t\t\t\t// to get all the props of the snapShot we want\n\t\t\t\t\tsetCurrentUser({\n\t\t\t\t\t\t// Whenever our user snapShot updates, we are setting the userReducer value with our new object\n\t\t\t\t\t\tid: snapShot.id,\n\t\t\t\t\t\t...snapShot.data()\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\t// If userAuth object comes back as null (that's maybe if the current user signs out)\n\t\t\t// userAuth is the object we want to update setCurrentUser with\n\t\t\tsetCurrentUser(userAuth);\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.unsubscribeFromAuth();\n\t}\n\t\n\t// Handling routes\n\trender() {\n\t\treturn (\n\t\t\t// Switching the signin route to exact and replacing component=SignInAndSignUPage\n\t\t\t// to render, so that we can redirect user to home site, if he's signed in, and if not,\n\t\t\t// then render the SignInAndSignUpPage\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={HomePage} />\n\t\t\t\t\t<Route path='/shop' component={ShopPage} />\n\t\t\t\t\t<Route exact path='/checkout' component={CheckoutPage} />\n\t\t\t\t\t<Route exact path='/signin' render={() => this.props.currentUser ? (<Redirect to='/' /> ) : (<SignInAndSignUpPage />)} /> \n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\t\n\t}\n}\n\n// Here the createStructuredSelector call will automatically pass our top level state that we get as\n// our mapStateToProps into each subsequent selector\nconst mapStateToProps = createStructuredSelector({\n\t// The props we want point to the correct selector now\n\tcurrentUser: selectCurrentUser\n});\n\n// Second connect argument (first in header.component.jsx)\n// Function that gets a dispatch prop and returns an object, where the prop name will be a prop we want to pass in that dispatches the new action that we try to pass, which is SET_CURRENT_USER\nconst mapDispatchToProps = dispatch => ({\n\t// Returning setCurrentUser that goes to a function that gets the user object and calls dispatch\n\t// dispatch is a way for redux to know that whatever gets passed, it's going to be an action object that redux will pass to every reducer\n\tsetCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\n// Connecting our app to the outcome of our initial connect call using the second argument of connect (mapDispatchToProps)\n// We replace our first argument from null (our currentUser) to mapStateToProps, so we have access to the actual current user once he's signed in\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}