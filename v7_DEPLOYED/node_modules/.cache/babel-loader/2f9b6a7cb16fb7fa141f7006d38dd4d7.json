{"ast":null,"code":"import _defineProperty from \"/workspace/crown-clothing/crown-clothing/v6_STRIPE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBFSmnYdJA2eAUeuVdW2jVOFfofielSN7g\",\n  authDomain: \"crown-clothing-f82de.firebaseapp.com\",\n  databaseURL: \"https://crown-clothing-f82de.firebaseio.com\",\n  projectId: \"crown-clothing-f82de\",\n  storageBucket: \"crown-clothing-f82de.appspot.com\",\n  messagingSenderId: \"78372993466\",\n  appId: \"1:78372993466:web:8631900a08bd5f200a0583\"\n};\nfirebase.initializeApp(config); // Taking user auth object and place it in our database,\n// using async (we make API-request = asyncronous action)\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // If there's no userAuth object\n  if (!userAuth) return; // Querying into our firestore for the document of userAuth object\n\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); // Getting snapshot of user reference asyncronously (await)\n  // to figure out whether there is data there\n  // (snapShot simply represents data)\n\n  const snapShot = await userRef.get(); // If there doesn't exist data for this userAuth object,\n  // we want to create data there (In order to perform any\n  // CRUD method, we have to use the documentRef)\n\n  if (!snapShot.exists) {\n    // Creating data using userRef\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date(); // Making an async request to our database to store the data\n\n    try {\n      // Using .set (the create method), and pass in an object of data\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef; // Used in app.js componentDidMount\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,sCAFD;AAGXC,EAAAA,WAAW,EAAE,6CAHF;AAIXC,EAAAA,SAAS,EAAE,sBAJA;AAKXC,EAAAA,aAAa,EAAE,kCALJ;AAMXC,EAAAA,iBAAiB,EAAE,aANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB,E,CAEA;AACA;;AACA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC5E;AACA,MAAI,CAACD,QAAL,EAAe,OAF6D,CAI5E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB,CAL4E,CAO5E;AACA;AACA;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAV4E,CAY5E;AACA;AACA;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACpB;AADoB,UAEZC,WAFY,GAEWT,QAFX,CAEZS,WAFY;AAAA,UAECC,KAFD,GAEWV,QAFX,CAECU,KAFD;AAGpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAHoB,CAKpB;;AACA,QAAI;AACH;AACA,YAAMV,OAAO,CAACW,GAAR;AACLJ,QAAAA,WADK;AAELC,QAAAA,KAFK;AAGLC,QAAAA;AAHK,SAIFV,cAJE,EAAN;AAMA,KARD,CAQE,OAAOa,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACA;AACD;;AAED,SAAOf,OAAP,CAlC4E,CAkC5D;AAChB,CAnCM;AAqCP,OAAO,MAAMgB,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe9B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyBFSmnYdJA2eAUeuVdW2jVOFfofielSN7g\",\n    authDomain: \"crown-clothing-f82de.firebaseapp.com\",\n    databaseURL: \"https://crown-clothing-f82de.firebaseio.com\",\n    projectId: \"crown-clothing-f82de\",\n    storageBucket: \"crown-clothing-f82de.appspot.com\",\n    messagingSenderId: \"78372993466\",\n    appId: \"1:78372993466:web:8631900a08bd5f200a0583\"\n  };\n\nfirebase.initializeApp(config);\n\n// Taking user auth object and place it in our database,\n// using async (we make API-request = asyncronous action)\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\t// If there's no userAuth object\n\tif (!userAuth) return;\n\t\n\t// Querying into our firestore for the document of userAuth object\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\t\n\t// Getting snapshot of user reference asyncronously (await)\n\t// to figure out whether there is data there\n\t// (snapShot simply represents data)\n\tconst snapShot = await userRef.get();\n\t\n\t// If there doesn't exist data for this userAuth object,\n\t// we want to create data there (In order to perform any\n\t// CRUD method, we have to use the documentRef)\n\tif(!snapShot.exists) {\n\t\t// Creating data using userRef\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\t\t\n\t\t// Making an async request to our database to store the data\n\t\ttry {\n\t\t\t// Using .set (the create method), and pass in an object of data\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\t\n\treturn userRef; // Used in app.js componentDidMount\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}