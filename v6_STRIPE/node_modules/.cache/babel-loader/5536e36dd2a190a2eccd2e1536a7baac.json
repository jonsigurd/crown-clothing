{"ast":null,"code":"// This reducer is the base reducer object that represents all of the state of the app\n// This reducer is the actual code that binds all of the other states together\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist'; // Here we get the actual localStorage object on our window browser\n// storage(localStorage) maintains states accross sessions (different tabs and after reloading)\n// sessionStorage maintains states for one tab only\n\nimport storage from 'redux-persist/lib/storage';\nimport userReducer from './user/user.reducer';\nimport cartReducer from './cart/cart.reducer';\nimport directoryReducer from './directory/directory.reducer';\nimport shopReducer from './shop/shop.reducer'; // Defining a new persist config\n// This is the JSON object that represents the possible configurations that we want for redux-persist\n// use\n\nconst persistConfig = {\n  // Our key is root, meaning at what point inside of our reducer object do we want to store\n  // everything\n  // We pass in storage that is the storage we use (localStorage)\n  // And we pass in the whitelist prop, which is the array containing the string names of any of the\n  // reducers that we wanna store (user is handled by firebase authentication, so no need to persist\n  // it)\n  key: 'root',\n  storage,\n  whitelist: ['cart']\n}; // One big json object of our app state\n// What we were exporting before, we now set to our rootReducer\n\nconst rootReducer = combineReducers({\n  // prop user that represents the slice of state for user (the props point to the reducers)\n  user: userReducer,\n  // prop cart that represents the slice of state for cart\n  cart: cartReducer,\n  // prop directory that represents the slice of state for directory\n  directory: directoryReducer,\n  // prop shop that represents the slice of state for shop\n  shop: shopReducer\n}); // Now we export the persistReducer as a function passing our persistConfig as well as our\n// rootReducer\n// This is a modified version of our rootReducer with peristConfig on top of it\n// (It now has persist capabilities)\n\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v5_ADVANCED_ROUTING_AND_STATE_NORMALIZATION/src/redux/root-reducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","cartReducer","directoryReducer","shopReducer","persistConfig","key","whitelist","rootReducer","user","cart","directory","shop"],"mappings":"AAAA;AACA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CACA;AACA;AACA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,WAAP,MAAwB,qBAAxB,C,CAEA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,GAAG,EAAE,MAPgB;AAQrBN,EAAAA,OARqB;AASrBO,EAAAA,SAAS,EAAE,CAAC,MAAD;AATU,CAAtB,C,CAYA;AACA;;AACA,MAAMC,WAAW,GAAGV,eAAe,CAAC;AACnC;AACAW,EAAAA,IAAI,EAAER,WAF6B;AAGnC;AACAS,EAAAA,IAAI,EAAER,WAJ6B;AAKnC;AACAS,EAAAA,SAAS,EAAER,gBANwB;AAOnC;AACAS,EAAAA,IAAI,EAAER;AAR6B,CAAD,CAAnC,C,CAWA;AACA;AACA;AACA;;AACA,eAAeL,cAAc,CAACM,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["// This reducer is the base reducer object that represents all of the state of the app\n// This reducer is the actual code that binds all of the other states together\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\n// Here we get the actual localStorage object on our window browser\n// storage(localStorage) maintains states accross sessions (different tabs and after reloading)\n// sessionStorage maintains states for one tab only\nimport storage from 'redux-persist/lib/storage';\n\nimport userReducer from './user/user.reducer';\nimport cartReducer from './cart/cart.reducer';\nimport directoryReducer from './directory/directory.reducer';\nimport shopReducer from './shop/shop.reducer';\n\n// Defining a new persist config\n// This is the JSON object that represents the possible configurations that we want for redux-persist\n// use\nconst persistConfig = {\n\t// Our key is root, meaning at what point inside of our reducer object do we want to store\n\t// everything\n\t// We pass in storage that is the storage we use (localStorage)\n\t// And we pass in the whitelist prop, which is the array containing the string names of any of the\n\t// reducers that we wanna store (user is handled by firebase authentication, so no need to persist\n\t// it)\n\tkey: 'root',\n\tstorage,\n\twhitelist: ['cart']\n}\n\n// One big json object of our app state\n// What we were exporting before, we now set to our rootReducer\nconst rootReducer = combineReducers({\n\t// prop user that represents the slice of state for user (the props point to the reducers)\n\tuser: userReducer,\n\t// prop cart that represents the slice of state for cart\n\tcart: cartReducer,\n\t// prop directory that represents the slice of state for directory\n\tdirectory: directoryReducer,\n\t// prop shop that represents the slice of state for shop\n\tshop: shopReducer\n});\n\n// Now we export the persistReducer as a function passing our persistConfig as well as our\n// rootReducer\n// This is a modified version of our rootReducer with peristConfig on top of it\n// (It now has persist capabilities)\nexport default persistReducer(persistConfig, rootReducer);"]},"metadata":{},"sourceType":"module"}