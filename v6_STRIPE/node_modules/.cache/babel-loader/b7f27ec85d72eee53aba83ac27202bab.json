{"ast":null,"code":"var _jsxFileName = \"/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/pages/collection/collection.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CollectionItem from '../../components/collection-item/collection-item.component';\nimport { selectCollection } from '../../redux/shop/shop.selectors';\nimport './collection.styles.scss'; // We destructure the collection object off of the state that we get from the mapStateToProps below\n\nconst CollectionPage = ({\n  collection\n}) => {\n  // Destructuring the title and items props off of our collection\n  const title = collection.title,\n        items = collection.items;\n  return (// Where className='items' we map over our items array and render out the CollectionItem giving it\n    // a key of item.id aa well as passing the item prop our item element\n    React.createElement(\"div\", {\n      className: \"collection-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, title), React.createElement(\"div\", {\n      className: \"items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, items.map(item => React.createElement(CollectionItem, {\n      key: item.id,\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }))))\n  );\n}; // Our first argument is state, which is the overall reducer state\n// The second argument is ownProps, which is the props of the component that we're wrapping in our\n// connect, including our match object that we get from the Route component that is passing our\n// collection on our shop page\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  // Returning an object, where the collection will go to our selectCollection and pass it\n  // ownProps.match.params.collectionId, and after that we pass in the state, because unlike other\n  // selectors, this selector needs a part of the state depending on the URL parameter\n  collection: selectCollection(ownProps.match.params.collectionId)(state)\n});\n\nexport default connect(mapStateToProps)(CollectionPage);","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/pages/collection/collection.component.jsx"],"names":["React","connect","CollectionItem","selectCollection","CollectionPage","collection","title","items","map","item","id","mapStateToProps","state","ownProps","match","params","collectionId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,cAAP,MAA2B,4DAA3B;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,OAAO,0BAAP,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAC1C;AAD0C,QAElCC,KAFkC,GAEjBD,UAFiB,CAElCC,KAFkC;AAAA,QAE3BC,KAF2B,GAEjBF,UAFiB,CAE3BE,KAF2B;AAI1C,SACC;AACA;AACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBD,KAAxB,CADD,EAEC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEEC,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI,oBAAC,cAAD;AAAgB,MAAA,GAAG,EAAEA,IAAI,CAACC,EAA1B;AAA8B,MAAA,IAAI,EAAED,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB,CAFF,CAFD;AAHD;AAYA,CAhBD,C,CAkBA;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC7C;AACA;AACA;AACAR,EAAAA,UAAU,EAAEF,gBAAgB,CAACU,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBC,YAAvB,CAAhB,CAAqDJ,KAArD;AAJiC,CAAtB,CAAxB;;AAOA,eAAeX,OAAO,CAACU,eAAD,CAAP,CAAyBP,cAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport CollectionItem from '../../components/collection-item/collection-item.component';\n\nimport { selectCollection } from '../../redux/shop/shop.selectors';\n\nimport './collection.styles.scss';\n\n// We destructure the collection object off of the state that we get from the mapStateToProps below\nconst CollectionPage = ({ collection }) => {\n\t// Destructuring the title and items props off of our collection\n\tconst { title, items } = collection;\n\t\n\treturn (\n\t\t// Where className='items' we map over our items array and render out the CollectionItem giving it\n\t\t// a key of item.id aa well as passing the item prop our item element\n\t\t<div className='collection-page'>\n\t\t\t<h2 className='title'>{ title }</h2>\n\t\t\t<div className='items'>\n\t\t\t\t{\n\t\t\t\t\titems.map(item => <CollectionItem key={item.id} item={item}/>)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Our first argument is state, which is the overall reducer state\n// The second argument is ownProps, which is the props of the component that we're wrapping in our\n// connect, including our match object that we get from the Route component that is passing our\n// collection on our shop page\nconst mapStateToProps = (state, ownProps) => ({\n\t// Returning an object, where the collection will go to our selectCollection and pass it\n\t// ownProps.match.params.collectionId, and after that we pass in the state, because unlike other\n\t// selectors, this selector needs a part of the state depending on the URL parameter\n\tcollection: selectCollection(ownProps.match.params.collectionId)(state)\n});\n\nexport default connect(mapStateToProps)(CollectionPage);"]},"metadata":{},"sourceType":"module"}