{"ast":null,"code":"// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect'; // Input selector that is a function that gets the whole state and returns just a slice of it\n// We just want the cart here\n\nconst selectCart = state => state.cart; // Output selector that selects cartItems, which is a prop on our cart\n// Because we use createSelector to make this selectCartItem selector, it's now a memoized selector\n\n\nexport const selectCartItems = createSelector( // Takes a collection (array) of input selectors as first argument\n// Takes a function that returns the value that we want out of the selector as second argument\n[selectCart], cart => cart.cartItems);\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity * cartItem.price, 0));\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity, 0));","map":{"version":3,"sources":["/workspace/crown-clothing/crown-clothing/v6_STRIPE/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartTotal","reduce","accumalatedQuantity","cartItem","quantity","price","selectCartHidden","hidden","selectCartItemsCount"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;AACA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,EAC5C;AACA;AACA,CAACC,UAAD,CAH4C,EAI5CE,IAAI,IAAIA,IAAI,CAACE,SAJ+B,CAAtC;AAOP,OAAO,MAAMC,eAAe,GAAGN,cAAc,CAC5C,CAACI,eAAD,CAD4C,EAE5CC,SAAS,IAAIA,SAAS,CAACE,MAAV,CAAiB,CAACC,mBAAD,EAAsBC,QAAtB,KAAmCD,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACE,KAAvG,EAA8G,CAA9G,CAF+B,CAAtC;AAKP,OAAO,MAAMC,gBAAgB,GAAGZ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE7CE,IAAI,IAAIA,IAAI,CAACU,MAFgC,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGd,cAAc,CACjD,CAACI,eAAD,CADiD,EAEjDC,SAAS,IAAIA,SAAS,CAACE,MAAV,CAAiB,CAACC,mBAAD,EAAsBC,QAAtB,KAAmCD,mBAAmB,GAAGC,QAAQ,CAACC,QAAnF,EAA6F,CAA7F,CAFoC,CAA3C","sourcesContent":["// Two types of selectors\n// 1. input selector - doesn't use createSelector\n// 2. output selector - does use input selectors and createSelector\nimport { createSelector } from 'reselect';\n\n// Input selector that is a function that gets the whole state and returns just a slice of it\n// We just want the cart here\nconst selectCart = state => state.cart;\n\n// Output selector that selects cartItems, which is a prop on our cart\n// Because we use createSelector to make this selectCartItem selector, it's now a memoized selector\nexport const selectCartItems = createSelector(\n\t// Takes a collection (array) of input selectors as first argument\n\t// Takes a function that returns the value that we want out of the selector as second argument\n\t[selectCart],\n\tcart => cart.cartItems\n);\n\nexport const selectCartTotal = createSelector(\n\t[selectCartItems],\n\tcartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity * cartItem.price, 0)\n);\n\nexport const selectCartHidden = createSelector(\n\t[selectCart],\n\tcart => cart.hidden\n);\n\nexport const selectCartItemsCount = createSelector(\n\t[selectCartItems],\n\tcartItems => cartItems.reduce((accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity, 0)\n);"]},"metadata":{},"sourceType":"module"}